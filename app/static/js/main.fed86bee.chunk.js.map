{"version":3,"sources":["modules/components/AppBar.js","modules/components/Toolbar.js","modules/views/AppAppBar.js","modules/views/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","root","color","palette","common","white","props","react_default","a","createElement","AppBar_default","Object","assign","elevation","position","defineProperty","height","breakpoints","up","Toolbar_default","title","fontSize","toolbar","justifyContent","left","flex","leftLinkActive","right","display","rightLink","marginLeft","spacing","unit","cursor","classes","components_AppBar","components_Toolbar","className","Link_default","variant","underline","placeholder","backgroundColor","primary","main","footer","bottom","light","Button_default","onClick","predict","App","state","data","refresh","answerReady","setRef","webcam","_this","capture","setState","loading","imageSrc","getScreenshot","callBackendAPI","then","res","catch","err","console","log","Promise","resolve","reject","blob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","dataURItoBlob","xhr","XMLHttpRequest","loc","window","location","document","body","appendChild","style","url","URL","createObjectURL","href","download","click","revokeObjectURL","open","concat","protocol","hostname","port","onerror","responseText","onload","e","this","readyState","response","JSON","parse","target","fileData","FormData","append","send","views_AppAppBar","react_webcam_default","audio","innerHeight","ref","screenshotFormat","width","innerWidth","videoConstraints","facingMode","LinearProgress_default","views_AppFooter","bind","Component","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fed86bee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiAppBar from '@material-ui/core/AppBar';\n\nconst styles = theme => ({\n    root: {\n        color: theme.palette.common.white,\n    },\n});\n\nfunction AppBar(props) {\n    return <MuiAppBar elevation={0} position=\"static\" {...props} />;\n}\n\nAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppBar);\n\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiToolbar from '@material-ui/core/Toolbar';\n\nexport const styles = theme => ({\n    root: {\n        height: 64,\n        [theme.breakpoints.up('sm')]: {\n            height: 70,\n        },\n    },\n});\n\nfunction Toolbar(props) {\n    return <MuiToolbar {...props} />;\n}\n\nexport default withStyles(styles)(Toolbar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport AppBar from '../components/AppBar';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer'\n    }\n});\n\nfunction AppAppBar(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <AppBar position=\"fixed\">\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Link\n                        variant=\"h6\"\n                        underline=\"none\"\n                        color=\"inherit\"\n                        className={classes.title}\n                    >\n                        {'Emotion Recognition'}\n                    </Link>\n                    <div className={classes.right}>\n                        {/*<Button className={classes.rightLink} onClick={props.clear}>Clear Palette</Button>*/}\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer',\n        backgroundColor: theme.palette.primary.main\n    },\n    footer: {\n        bottom: 0,\n        backgroundColor: theme.palette.primary.light\n    }\n});\n\n\nfunction AppFooter(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <div position=\"fixed\" className={classes.footer}>\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Button className={classes.rightLink} onClick={props.predict}>Predict Emotion</Button>\n                    <div className={classes.right}/>\n                </Toolbar>\n            </div>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppFooter.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppFooter);","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport AppAppBar from './modules/views/AppAppBar';\nimport AppFooter from './modules/views/AppFooter';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport './App.css';\n\nfunction dataURItoBlob(dataURI) {\n  // convert base64/URLEncoded data component to raw binary data held in a string\n  let byteString;\n  if (dataURI.split(',')[0].indexOf('base64') >= 0)\n    byteString = atob(dataURI.split(',')[1]);\n  else\n    byteString = unescape(dataURI.split(',')[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n  // write the bytes of the string to a typed array\n  let ia = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n  console.log(ia);\n\n  return new Blob([ia], {type:mimeString});\n}\n\nclass App extends Component {\n  state = {\n    data: null,\n    refresh: false,\n    answerReady: false\n  };\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  callBackendAPI(imageSrc) {\n    return new Promise((resolve, reject) => {\n      let blob = dataURItoBlob(imageSrc);\n      let xhr = new XMLHttpRequest();\n      let loc = window.location;\n      let a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.style = \"display: none\";\n      let url = window.URL.createObjectURL(blob);\n      a.href = url;\n      a.download = 'download.jpeg';\n      a.click();\n      window.URL.revokeObjectURL(url);\n      xhr.open('POST', `${loc.protocol}//${loc.hostname}:${loc.port}/analyze`, true);\n      xhr.onerror = function() {reject(xhr.responseText);}\n      xhr.onload = function(e) {\n        if (this.readyState === 4) {\n          let response = JSON.parse(e.target.responseText);\n          resolve(`Result = ${response['result']}`);\n        }\n      };\n\n      let fileData = new FormData();\n      fileData.append('file', blob);\n      xhr.send(fileData);\n    })\n  }\n\n  capture = () => {\n    this.setState({loading: true});\n    const imageSrc = this.webcam.getScreenshot();\n    this.callBackendAPI(imageSrc)\n        .then(res => {\n          this.setState({ data: res, answerReady: true, loading: false })\n        })\n        .catch(err => console.log(err));\n  };\n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720,\n      facingMode: \"user\"\n    };\n    return (\n      <div className=\"App\">\n        <AppAppBar/>\n        <Webcam\n            audio={false}\n            height={window.innerHeight-70}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={window.innerWidth}\n            videoConstraints={videoConstraints} />\n        {this.state.loading? <LinearProgress/>: ''}\n        <AppFooter predict={this.capture.bind(this)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}