{"version":3,"sources":["modules/components/AppBar.js","modules/components/Toolbar.js","modules/views/AppAppBar.js","modules/views/AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","root","color","palette","common","white","props","react_default","a","createElement","AppBar_default","Object","assign","elevation","position","defineProperty","height","breakpoints","up","Toolbar_default","title","fontSize","toolbar","justifyContent","left","flex","leftLinkActive","right","display","rightLink","marginLeft","spacing","unit","cursor","classes","emotionTag","emotion","className","components_AppBar","components_Toolbar","Link_default","variant","underline","placeholder","backgroundColor","primary","main","footer","bottom","light","Button_default","onClick","predict","text","App","state","data","refresh","answerReady","loading","buttonText","setRef","webcam","_this","capture","imageSrc","getScreenshot","callBackendAPI","then","res","setState","console","log","catch","err","buttonPress","this","Promise","resolve","reject","blob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","dataURItoBlob","xhr","XMLHttpRequest","open","onerror","responseText","onload","e","readyState","response","JSON","parse","target","concat","fileData","FormData","append","send","views_AppAppBar","react_webcam_default","audio","window","innerHeight","ref","screenshotFormat","width","innerWidth","videoConstraints","facingMode","LinearProgress_default","views_AppFooter","bind","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba1114d8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiAppBar from '@material-ui/core/AppBar';\n\nconst styles = theme => ({\n    root: {\n        color: theme.palette.common.white,\n    },\n});\n\nfunction AppBar(props) {\n    return <MuiAppBar elevation={0} position=\"static\" {...props} />;\n}\n\nAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppBar);\n\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MuiToolbar from '@material-ui/core/Toolbar';\n\nexport const styles = theme => ({\n    root: {\n        height: 64,\n        [theme.breakpoints.up('sm')]: {\n            height: 70,\n        },\n    },\n});\n\nfunction Toolbar(props) {\n    return <MuiToolbar {...props} />;\n}\n\nexport default withStyles(styles)(Toolbar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport AppBar from '../components/AppBar';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer'\n    }\n});\n\nfunction AppAppBar(props) {\n    const { classes } = props;\n\n    let emotionTag = null;\n\n    switch (props.emotion) {\n        case 'angry':\n            emotionTag = <i className=\"em em-angry\"></i>\n            break;\n        case 'disgust':\n            emotionTag = <i className=\"em em-nauseated_face\"></i>\n            break;\n        case 'fear':\n            emotionTag = <i className=\"em em-fearful\"></i>\n            break;\n        case 'happy':\n            emotionTag = <i className=\"em em-smile\"></i>\n            break;\n        case 'sad':\n            emotionTag = <i className=\"em em-cry\"></i>\n            break;\n        case 'surprise':\n            emotionTag = <i className=\"em em-astonished\"></i>\n            break;\n        case 'neutral':\n            emotionTag = <i className=\"em em-no_mouth\"></i>\n            break;\n        default:\n            emotionTag = <i className=\"em em-thinking_face\"></i>\n    }\n\n    return (\n        <div>\n            <AppBar position=\"fixed\">\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Link\n                        variant=\"h6\"\n                        underline=\"none\"\n                        color=\"inherit\"\n                        className={classes.title}\n                    >\n                        {'Emotion Recognition'}\n                    </Link>\n                    <div className={classes.right}>\n                        {emotionTag}\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppAppBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Toolbar from '../components/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    title: {\n        fontSize: 24,\n    },\n    //placeholder: toolbarStyles(theme).root,\n    toolbar: {\n        justifyContent: 'space-between',\n    },\n    left: {\n        flex: 1,\n    },\n    leftLinkActive: {\n        color: theme.palette.common.white,\n    },\n    right: {\n        flex: 1,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    rightLink: {\n        fontSize: 16,\n        color: theme.palette.common.white,\n        marginLeft: theme.spacing.unit * 3,\n        cursor: 'pointer',\n        backgroundColor: theme.palette.primary.main\n    },\n    footer: {\n        bottom: 0,\n        backgroundColor: theme.palette.primary.light\n    }\n});\n\n\nfunction AppFooter(props) {\n    const { classes } = props;\n\n    return (\n        <div>\n            <div position=\"fixed\" className={classes.footer}>\n                <Toolbar className={classes.toolbar}>\n                    <div className={classes.left} />\n                    <Button className={classes.rightLink} onClick={props.predict}>{props.text}</Button>\n                    <div className={classes.right}/>\n                </Toolbar>\n            </div>\n            <div className={classes.placeholder} />\n        </div>\n    );\n}\n\nAppFooter.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppFooter);","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport AppAppBar from './modules/views/AppAppBar';\nimport AppFooter from './modules/views/AppFooter';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport './App.css';\n\nfunction dataURItoBlob(dataURI) {\n  // convert base64/URLEncoded data component to raw binary data held in a string\n  let byteString;\n  if (dataURI.split(',')[0].indexOf('base64') >= 0)\n    byteString = atob(dataURI.split(',')[1]);\n  else\n    byteString = unescape(dataURI.split(',')[1]);\n\n  // separate out the mime component\n  let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n  // write the bytes of the string to a typed array\n  let ia = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([ia], {type:mimeString});\n}\n\nclass App extends Component {\n\n  state = {\n    data: null,\n    refresh: false,\n    answerReady: false,\n    loading: false,\n    buttonText: \"Start Recording\"\n  };\n  setRef = webcam => {\n    this.webcam = webcam;\n  };\n\n  componentDidMount() {\n    if(this.state.loading === true) {\n      this.capture();\n    }\n  }\n\n  callBackendAPI(imageSrc) {\n    return new Promise((resolve, reject) => {\n      let blob = dataURItoBlob(imageSrc);\n      let xhr = new XMLHttpRequest();\n      xhr.open('POST', `https://facezam.onrender.com/analyze`, true);\n      xhr.onerror = function() {reject(xhr.responseText);};\n      xhr.onload = function(e) {\n        if (this.readyState === 4) {\n          let response = JSON.parse(e.target.responseText);\n          resolve(`${response['result']}`);\n        }\n      };\n\n      let fileData = new FormData();\n      fileData.append('file', blob);\n      xhr.send(fileData);\n    })\n  }\n\n  capture = () => {\n\n    const imageSrc = this.webcam.getScreenshot();\n    this.callBackendAPI(imageSrc)\n        .then(res => {\n          this.setState({\n            emotion: res\n          });\n          console.log(res);\n          this.state.loading && this.capture();\n        })\n        .catch((err) => {\n          console.log(err);\n          this.state.loading && this.capture();\n        });\n  };\n\n  buttonPress = () => {\n    if(this.state.loading === false) {\n      this.setState({\n        loading: true,\n        buttonText: \"Stop Recording\"\n      });\n      this.capture();\n    }\n    else this.setState({\n      loading: false,\n      buttonText: \"Start Recording\"\n    });\n  };\n\n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720,\n      facingMode: \"user\"\n    };\n    return (\n      <div className=\"App\">\n        <AppAppBar emotion = {this.state.emotion}/>\n        <Webcam\n            audio={false}\n            height={window.innerHeight-70}\n            ref={this.setRef}\n            screenshotFormat=\"image/jpeg\"\n            width={window.innerWidth}\n            videoConstraints={videoConstraints} />\n        {this.state.loading? <LinearProgress/>: ''}\n        <AppFooter predict={this.buttonPress.bind(this)} text = {this.state.buttonText}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}